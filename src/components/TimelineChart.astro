---
---

<div class="bg-white rounded-2xl shadow-xl p-6 border border-slate-200">
  <div class="mb-4">
    <h3 class="text-xl font-semibold text-slate-800 mb-2">√âvolution Rail vs Tourisme (2015-2024)</h3>
    <label class="block text-sm text-slate-600 mb-2">
      Choisir un d√©partement
      <select id="dept-select" class="ml-2 px-3 py-2 border border-slate-300 rounded-lg">
        <option value="">Chargement...</option>
      </select>
    </label>
  </div>
  <div id="timeline-container"></div>
  <div class="mt-4 flex gap-4 text-sm">
    <div class="flex items-center gap-2">
      <div class="w-4 h-4 bg-purple-600 rounded"></div>
      <span class="text-slate-600">Fr√©quentation gares (voyageurs/an)</span>
    </div>
    <div class="flex items-center gap-2">
      <div class="w-4 h-4 bg-orange-500 rounded"></div>
      <span class="text-slate-600">Nuit√©es touristiques</span>
    </div>
  </div>
  <div class="mt-3 bg-blue-50 p-3 rounded-lg">
    <p class="text-sm text-slate-700">
      üí° <strong>Lecture :</strong> Les deux courbes en valeurs absolues pour comparer les volumes.
    </p>
  </div>
</div>

<script>
  import * as d3 from 'd3';
  import * as Plot from '@observablehq/plot';

  let currentData: any = null;

  function deptFromCP(cp: string | null): string | null {
    if (!cp) return null;
    const s = String(cp).padStart(5, '0');
    if (s.startsWith('97') || s.startsWith('98')) return s.slice(0, 3);
    if (s.startsWith('20')) return null;
    return s.slice(0, 2);
  }

  async function loadData() {
    if (currentData) return currentData;
    
    const [deptsGeo, nuiteesDep, popDep, freq] = await Promise.all([
      fetch('/data/departements.geojson').then(r => r.json()),
      fetch('/data/NUITEES_PAR_DEP.json').then(r => r.json()),
      fetch('/data/popraw.json').then(r => r.json()),
      fetch('/data/frequentation-gares.json').then(r => r.json())
    ]);

    // Debug: afficher la structure du premier √©l√©ment
    console.log('Structure nuiteesDep:', nuiteesDep[0]);

    currentData = { deptsGeo, nuiteesDep, popDep, freq };
    return currentData;
  }

  function processData(data: any) {
    const { deptsGeo, nuiteesDep } = data;

    // Debug: voir toutes les cl√©s possibles
    const sampleKeys = nuiteesDep[0] ? Object.keys(nuiteesDep[0]) : [];
    console.log('Cl√©s disponibles dans nuiteesDep:', sampleKeys);

    // Agr√©gation par d√©partement et ann√©e
    const nuiteesByDepAndYear = d3.rollup(
      nuiteesDep,
      (v: any) => d3.sum(v, (d: any) => 
        +(d.hotel_nuitees || 0) + +(d.camping_nuitees || 0) + +(d.autres_nuitees || 0)
      ),
      (d: any) => String(d.code_departement),
      (d: any) => +d.year
    );

    const depNameByCode = new Map(
      deptsGeo.features
        .filter((f: any) => {
          const code = String(f.properties.code || f.properties.CODE_DEPT);
          return !/^(97|98)/.test(code);
        })
        .map((f: any) => [
          String(f.properties.code || f.properties.CODE_DEPT),
          String(f.properties.nom || f.properties.NOM)
        ])
    );

    const depOptions = Array.from(nuiteesByDepAndYear.keys())
      .filter(code => !/^(97|98|M|F)/.test(code))
      .map(code => ({
        label: `${depNameByCode.get(code) || code} (${code})`,
        value: code
      }))
      .sort((a, b) => a.label.localeCompare(b.label));

    return { nuiteesByDepAndYear, depOptions };
  }

  function yearKey(row: any, y: number) {
    return (
      row?.[`total_voyageurs_${y}`] ??
      row?.[`totalvoyageurs${y}`] ??
      row?.[`voyageurs_${y}`] ??
      row?.[`trafic_${y}`] ??
      row?.[`${y}`] ??
      0
    );
  }

  async function renderTimeline(depCode: string) {
    const data = await loadData();
    const { freq } = data;
    const { nuiteesByDepAndYear } = processData(data);

    const years = d3.range(2015, 2025);

    // Donn√©es rail brutes
    const railData = years.map(y => ({
      year: y,
      value: d3.sum(freq, (r: any) =>
        deptFromCP(r.code_postal) === depCode ? +yearKey(r, y) : 0
      )
    }));

    // Donn√©es tourisme brutes
    const tourismeData = years.map(y => {
      const val = nuiteesByDepAndYear.get(depCode)?.get(y) || 0;
      return { year: y, value: val };
    });
    

    const serieRail = railData.map(d => ({
      year: d.year,
      value: d.value,
      type: 'Fr√©quentation gares'
    }));

    const serieTourisme = tourismeData.map(d => ({
      year: d.year,
      value: d.value,
      type: 'Nuit√©es touristiques'
    }));

    // Trouver le max pour l'√©chelle
    const maxRail = d3.max(serieRail, d => d.value) || 0;
    const maxTourisme = d3.max(serieTourisme, d => d.value) || 0;
    const maxY = Math.max(maxRail, maxTourisme) * 1.15;

    const plot = Plot.plot({
      width: 600,
      height: 360,
      marginLeft: 100,
      y: { 
        label: 'Volume',
        grid: true,
        tickFormat: d => d3.format('.2s')(d),
        domain: [0, maxY]
      },
      x: { 
        label: 'Ann√©es',
        domain: [2015, 2024]
      },
      color: { 
        legend: true,
        domain: ['Fr√©quentation gares', 'Nuit√©es touristiques'],
        range: ['#8b5cf6', '#fb923c']
      },
      marks: [
        // Zone COVID
        Plot.rect([{ x1: 2020, x2: 2021 }], {
          x1: 'x1',
          x2: 'x2',
          y1: 0,
          y2: maxY,
          fill: '#fecaca',
          opacity: 0.1
        }),
        
        // Ligne Rail
        Plot.line(serieRail, {
          x: 'year',
          y: 'value',
          stroke: '#8b5cf6',
          strokeWidth: 3,
          curve: 'catmull-rom',
          tip: true,
          title: (d: any) => `Voyageurs ${d.year}: ${d.value.toLocaleString()}`
        }),
        
        // Ligne Tourisme
        Plot.line(serieTourisme, {
          x: 'year',
          y: 'value',
          stroke: '#fb923c',
          strokeWidth: 3,
          curve: 'catmull-rom',
          tip: true,
          title: (d: any) => `Nuit√©es ${d.year}: ${d.value.toLocaleString()}`
        }),
        
        // Points Rail
        Plot.dot(serieRail, {
          x: 'year',
          y: 'value',
          fill: '#8b5cf6',
          r: 4,
          stroke: 'white',
          strokeWidth: 2
        }),
        
        // Points Tourisme
        Plot.dot(serieTourisme, {
          x: 'year',
          y: 'value',
          fill: '#fb923c',
          r: 4,
          stroke: 'white',
          strokeWidth: 2
        })
      ]
    });

    const container = document.getElementById('timeline-container');
    if (container) {
      container.innerHTML = '';
      container.appendChild(plot);
    }
  }

  async function init() {
    const data = await loadData();
    const { depOptions } = processData(data);

    const select = document.getElementById('dept-select') as HTMLSelectElement;
    if (select) {
      select.innerHTML = depOptions
        .map(opt => `<option value="${opt.value}">${opt.label}</option>`)
        .join('');

      select.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        renderTimeline(target.value);
      });

      // Initial render
      if (depOptions.length > 0) {
        renderTimeline(depOptions[0].value);
      }
    }
  }

  init();
</script>