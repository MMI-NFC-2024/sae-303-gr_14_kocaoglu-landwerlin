---
---

<div class="bg-white rounded-2xl shadow-xl p-6 border border-slate-200">
  <div class="mb-4">
    <h3 class="text-xl font-semibold text-slate-800 mb-2">Top d√©partements par intensit√© touristique</h3>
    <label class="block text-sm text-slate-600 mb-2">
      Afficher les
      <select id="topN-select" class="ml-2 px-3 py-1 border border-slate-300 rounded-lg">
        <option value="10">10</option>
        <option value="15">15</option>
        <option value="20" selected>20</option>
        <option value="30">30</option>
      </select>
      premiers d√©partements
    </label>
  </div>
  <div id="bar-container"></div>
</div>

<script>
  import * as d3 from 'd3';
  import * as Plot from '@observablehq/plot';

  let currentData: any = null;

  async function loadData() {
    if (currentData) return currentData;
    
    const [deptsGeo, nuiteesDep, popDep, freq] = await Promise.all([
      fetch('/data/departements.geojson').then(r => r.json()),
      fetch('/data/NUITEES_PAR_DEP.json').then(r => r.json()),
      fetch('/data/popraw.json').then(r => r.json()),
      fetch('/data/frequentation-gares.json').then(r => r.json())
    ]);

    currentData = { deptsGeo, nuiteesDep, popDep, freq };
    return currentData;
  }

  function processData(data: any) {
    const { deptsGeo, nuiteesDep, popDep, freq } = data;

    const nomToCodeDep = new Map(
      deptsGeo.features.map((f: any) => [
        (f.properties.nom || f.properties.NOM).toLowerCase(),
        String(f.properties.code || f.properties.CODE_DEPT)
      ])
    );

    const popByDep = new Map(
      popDep
        .map((d: any) => [nomToCodeDep.get(d["G√©ographie"].toLowerCase()), +d["Valeur"]])
        .filter(([code, val]: any) => code && !isNaN(val))
    );

    const nuiteesByDep = d3.rollup(
      nuiteesDep,
      (v: any) => {
        const total = d3.sum(v, (d: any) => 
          (+d.hotel_nuitees || 0) + (+d.camping_nuitees || 0) + (+d.autres_nuitees || 0)
        );
        const code = String(v[0].code_departement);
        const pop = popByDep.get(code) || 0;
        return { total, nuitees_1000: pop ? (total / pop) * 1000 : 0 };
      },
      (d: any) => String(d.code_departement)
    );

    const deptFromCP = (cp: string) => {
      const s = String(cp).padStart(5, '0');
      if (s.startsWith('97') || s.startsWith('98')) return s.slice(0, 3);
      if (s.startsWith('20')) return null;
      return s.slice(0, 2);
    };

    const voy2024ByDep = d3.rollup(
      freq,
      (rows: any) => d3.sum(rows, (r: any) => +r.total_voyageurs_2024 || 0),
      (r: any) => deptFromCP(String(r.code_postal))
    );

    const vals = [...voy2024ByDep.values()];
    const min = d3.min(vals) || 0;
    const max = d3.max(vals) || 1;
    const IATR = new Map();
    for (const [dep, val] of voy2024ByDep) {
      if (dep) IATR.set(dep, ((val - min) / (max - min || 1)) * 100);
    }

    const iatrVals = [...IATR.values()].sort(d3.ascending);
    const q33 = d3.quantileSorted(iatrVals, 0.33);
    const q66 = d3.quantileSorted(iatrVals, 0.66);

    return { deptsGeo, nuiteesByDep, IATR, q33, q66 };
  }

  async function renderChart(topN: number = 20) {
    const data = await loadData();
    const { deptsGeo, nuiteesByDep, IATR, q33, q66 } = processData(data);

    const rowsBar = Array.from(nuiteesByDep, ([dep, o]) => ({
      dep,
      nom: deptsGeo.features.find((f: any) => {
        const code = String(f.properties.code || f.properties.CODE_DEPT);
        return code === dep;
      })?.properties?.nom || dep,
      nuitees_1000: o.nuitees_1000 || 0,
      IATR: IATR.get(dep) || 0
    }))
      .sort((a, b) => d3.descending(a.nuitees_1000, b.nuitees_1000))
      .slice(0, topN)
      .reverse();

    const classeIATR = (v: number) =>
      v >= q66 ? 'üü¢ Bien desservi' : v >= q33 ? 'üü† Opportunit√©' : 'üî¥ Sous-desservi';

    const plot = Plot.plot({
      width: 600,
      height: rowsBar.length * 24 + 60,
      marginLeft: 180,
      x: { label: 'Nuit√©es / 1000 hab' },
      marks: [
        Plot.barX(rowsBar, {
          y: 'nom',
          x: 'nuitees_1000',
          fill: '#60a5fa',
          tip: true,
          title: (d: any) => `${d.nom}\nNuit√©es / 1000 hab : ${d.nuitees_1000.toFixed(1)}`
        }),
        Plot.dot(rowsBar, {
          y: 'nom',
          x: (d: any) => d.nuitees_1000 * (d.IATR / 100),
          r: 6,
          fill: (d: any) =>
            d.IATR >= q66 ? '#10b981' : d.IATR >= q33 ? '#fb923c' : '#ef4444',
          title: (d: any) => `IATR : ${d.IATR.toFixed(1)} (${classeIATR(d.IATR)})`
        })
      ]
    });

    const container = document.getElementById('bar-container');
    if (container) {
      container.innerHTML = '';
      container.appendChild(plot);
    }
  }

  // Initial render
  renderChart(20);

  // Listen for changes
  const select = document.getElementById('topN-select') as HTMLSelectElement;
  if (select) {
    select.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      renderChart(parseInt(target.value));
    });
  }
</script>